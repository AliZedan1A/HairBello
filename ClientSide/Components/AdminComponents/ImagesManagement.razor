@page "/ImagesManagement"
@using ClientSide.Services.Class
@using ClientSide.Services.InterFace
@inject IImageService _ImageService
@inject AlertService _Alert

@using Domain.DataTransfareObject
@using Domain.DatabaseModels
@using Microsoft.AspNetCore.Components.Forms

<div class="images-management-wrapper">

    <h2 class="title">إدارة الصور</h2>
    <p class="subtitle">يمكنك عرض وإضافة وتعديل وحذف الصور بسهولة.</p>

    <!-- إضافة صورة جديدة -->
    <div class="add-image-section">
        <h4>إضافة صورة جديدة</h4>
        <div class="add-image-row">
            <!-- اختيار ملف الصورة (محدد لـ image فقط) -->
            <InputFile OnChange="OnSelectNewImage" multiple="false" accept="image/*" />

            <!-- عرض معاينة إن وجدت -->
            @if (!string.IsNullOrWhiteSpace(newImageBase64))
            {
                <img src="@newImageBase64" class="image-preview" alt="معاينة الصورة" />
            }
        </div>
        <button class="btn primary"
                @onclick="AddImage"
                disabled="@(!CanAddNewImage)">
            إضافة الصورة
        </button>
    </div>

    <hr />

    <!-- عرض قائمة الصور -->
    <div class="images-list">
        @if (images == null || images.Count == 0)
        {
            <div class="no-data">لا توجد صور حاليًا.</div>
        }
        else
        {
            @foreach (var img in images)
            {
                <div class="image-card">
                    <!-- الصورة المصغرة -->
                    <img src="@img.Base64Url"
                         alt="صورة"
                         class="image-thumbnail"
                         @onclick="@(() => ShowLargeImage(img.Base64Url))" />

                    <div class="card-actions">
                        <button class="btn warning" @onclick="@(() => StartEdit(img))">تعديل</button>
                        <button class="btn danger" @onclick="@(() => DeleteImage(img.Id))">حذف</button>
                    </div>
                </div>
            }
        }
    </div>
</div>

<!-- نافذة تعديل الصورة (Modal) -->
@if (editingImageId != 0)
{
    <div class="modal-backdrop">
        <div class="modal-content">
            <h4>تعديل الصورة</h4>

            <InputFile OnChange="OnSelectEditImage" multiple="false" accept="image/*" />

            @if (!string.IsNullOrWhiteSpace(editingImageBase64))
            {
                <img src="@editingImageBase64" class="image-preview" alt="معاينة الصورة" />
            }

            <div class="modal-actions">
                <button class="btn success" @onclick="SaveEdit">حفظ</button>
                <button class="btn secondary" @onclick="CancelEdit">إلغاء</button>
            </div>
        </div>
    </div>
}

<!-- نافذة تكبير الصورة (Modal) عند النقر -->
@if (showLargeImage)
{
    <div class="modal-backdrop">
        <div class="modal-content large-image-modal">
            <img src="@largeImageBase64" alt="Large Image" class="large-view" />
            <button class="btn secondary" @onclick="CloseLargeImage">إغلاق</button>
        </div>
    </div>
}

<style>
    /* الحاوية العامة */
    .images-management-wrapper {
        max-width: 600px;
        margin: 1rem auto;
        padding: 1rem;
        background: #fff;
        border-radius: 8px;
        box-shadow: 0 2px 6px rgba(0,0,0,0.1);
        animation: fadeInUp 0.4s ease;
    }

    @@keyframes fadeInUp {
        from

    {
        opacity: 0;
        transform: translateY(10px);
    }

    to {
        opacity: 1;
        transform: translateY(0);
    }

    }

    .title {
        text-align: center;
        font-size: 1.3rem;
        margin-bottom: 0.5rem;
        color: #333;
    }

    .subtitle {
        text-align: center;
        font-size: 0.9rem;
        color: #666;
        margin-bottom: 1.2rem;
    }

    /* إضافة صورة جديدة */
    .add-image-section {
        margin-bottom: 1rem;
        background: #fafafa;
        padding: 0.8rem;
        border-radius: 6px;
    }

        .add-image-section h4 {
            margin-bottom: 0.5rem;
            color: #444;
        }

    .add-image-row {
        display: flex;
        flex-wrap: wrap;
        align-items: center;
        gap: 0.8rem;
        margin-bottom: 0.5rem;
    }

    .image-preview {
        max-width: 100px;
        max-height: 100px;
        border-radius: 6px;
        object-fit: cover;
        box-shadow: 0 1px 3px rgba(0,0,0,0.2);
    }

    /* قائمة الصور */
    .images-list {
        margin-top: 1rem;
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));
        gap: 1rem;
    }

    .no-data {
        text-align: center;
        font-style: italic;
        color: #999;
    }

    .image-card {
        background: #f9f9f9;
        border-radius: 6px;
        padding: 0.5rem;
        display: flex;
        flex-direction: column;
        align-items: center;
        box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        transition: background 0.2s;
    }

        .image-card:hover {
            background: #f0f0f0;
        }

    .image-thumbnail {
        width: 100%;
        height: auto;
        border-radius: 4px;
        cursor: pointer;
        object-fit: cover;
        margin-bottom: 0.5rem;
        transition: transform 0.3s;
    }

        .image-thumbnail:hover {
            transform: scale(1.02);
        }

    .card-actions {
        display: flex;
        gap: 0.5rem;
    }

    /* الأزرار */
    .btn {
        border: none;
        border-radius: 4px;
        padding: 0.45rem 0.7rem;
        font-size: 0.8rem;
        cursor: pointer;
        transition: transform 0.2s;
    }

        .btn:hover {
            transform: translateY(-2px);
        }

    .primary {
        background-color: #6200ee;
        color: #fff;
    }

    .secondary {
        background-color: #9e9e9e;
        color: #fff;
    }

    .success {
        background-color: #4caf50;
        color: #fff;
    }

    .warning {
        background-color: #ffca28;
        color: #333;
    }

    .danger {
        background-color: #e53935;
        color: #fff;
    }

    /* النافذة (مربع حوار) لتعديل/تكبير الصورة */
    .modal-backdrop {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0,0,0,0.6);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 999;
    }

    .modal-content {
        background: #fff;
        border-radius: 6px;
        padding: 1rem;
        max-width: 90%;
        max-height: 80%;
        display: flex;
        flex-direction: column;
        gap: 0.8rem;
        overflow-y: auto;
        box-shadow: 0 2px 6px rgba(0,0,0,0.3);
        animation: zoomIn 0.3s ease;
    }
    @@keyframes zoomIn {
        from

    {
        transform: scale(0.9);
        opacity: 0;
    }

    to {
        transform: scale(1);
        opacity: 1;
    }

    }

    .modal-actions {
        display: flex;
        gap: 0.5rem;
    }

    .large-image-modal {
        align-items: center;
    }

    .large-view {
        max-width: 90vw;
        max-height: 70vh;
        border-radius: 6px;
        object-fit: contain;
        margin-bottom: 1rem;
    }

    /* استجابة للشاشات الأصغر */
    @@media (max-width: 600px) {
        .images-management-wrapper

    {
        margin: 0.5rem;
        padding: 0.8rem;
    }

    .add-image-row {
        flex-direction: column;
        align-items: flex-start;
    }

    .image-preview {
        max-width: 80px;
        max-height: 80px;
    }

    .images-list {
        grid-template-columns: repeat(auto-fill, minmax(100px, 1fr));
        gap: 0.8rem;
    }

    .large-view {
        max-width: 95vw;
        max-height: 60vh;
    }

    }
</style>

@code {
    /* قائمة الصور */
    private List<PreviewImageModel> images = new();

    /* إضافة صورة جديدة */
    private string newImageBase64;  // تُحمل فيها القيمة عند اختيار الصورة
    private bool CanAddNewImage => !string.IsNullOrWhiteSpace(newImageBase64);

    /* تعديل صورة */
    private int editingImageId;
    private string editingImageBase64;

    /* تكبير الصورة */
    private bool showLargeImage;
    private string largeImageBase64;

    protected override async Task OnInitializedAsync()
    {
        await LoadImages();
    }

    private async Task LoadImages()
    {
        var result = await _ImageService.GetImages();
        if (result.IsSucceeded && result.Value != null)
        {
            images = result.Value;
        }
        else
        {
            _Alert.ShowAlert(result.Comment ?? "فشل في جلب قائمة الصور", AlertType.Error);
        }
    }

    /* ===================== إضافة صورة جديدة ===================== */
    private async Task AddImage()
    {
        if (CanAddNewImage)
        {
            var req = new CreatePreviewImageDto
                {
                    Base64Url = newImageBase64
                };

            var result = await _ImageService.AddImage(req);
            if (result.IsSucceeded)
            {
                _Alert.ShowAlert("تمت إضافة الصورة بنجاح", AlertType.Success);
                newImageBase64 = string.Empty; // تفريغ المعاينة
                await LoadImages();           // إعادة جلب القائمة
            }
            else
            {
                _Alert.ShowAlert(result.Comment ?? "فشل في إضافة الصورة", AlertType.Error);
            }
        }
    }

    /* عند اختيار صورة جديدة لإضافتها */
    private async Task OnSelectNewImage(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file is not null)
        {
            // نحدد حجمًا أقصى (5 MB مثلا)
            var maxAllowedSize = 5 * 1024 * 1024;
            if (!file.ContentType.StartsWith("image/"))
            {
                _Alert.ShowAlert("الرجاء اختيار ملف صورة فقط!", AlertType.Error);
                return;
            }

            using var ms = new MemoryStream();
            await file.OpenReadStream(maxAllowedSize).CopyToAsync(ms);

            var contentType = file.ContentType;
            newImageBase64 = $"data:{contentType};base64,{Convert.ToBase64String(ms.ToArray())}";
        }
    }

    /* ===================== حذف الصورة ===================== */
    private async Task DeleteImage(int id)
    {
        var result = await _ImageService.RemoveImage(id);
        if (result.IsSucceeded)
        {
            _Alert.ShowAlert("تم حذف الصورة بنجاح", AlertType.Success);
            await LoadImages();
        }
        else
        {
            _Alert.ShowAlert(result.Comment ?? "فشل في حذف الصورة", AlertType.Error);
        }
    }

    /* ===================== تعديل الصورة ===================== */
    private void StartEdit(PreviewImageModel img)
    {
        editingImageId = img.Id;
        editingImageBase64 = img.Base64Url;
    }

    private async Task SaveEdit()
    {
        if (editingImageId > 0 && !string.IsNullOrWhiteSpace(editingImageBase64))
        {
            var req = new UpdatePreviewImageDto
                {
                    Id = editingImageId,
                    Base64Url = editingImageBase64
                };

            var result = await _ImageService.EditImage(req);
            if (result.IsSucceeded)
            {
                _Alert.ShowAlert("تم تعديل الصورة بنجاح", AlertType.Success);
                editingImageId = 0;
                editingImageBase64 = string.Empty;
                await LoadImages();
            }
            else
            {
                _Alert.ShowAlert(result.Comment ?? "فشل في تعديل الصورة", AlertType.Error);
            }
        }
    }

    private void CancelEdit()
    {
        editingImageId = 0;
        editingImageBase64 = string.Empty;
    }

    /* عند اختيار صورة بديلة في وضع التعديل */
    private async Task OnSelectEditImage(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file is not null)
        {
            var maxAllowedSize = 5 * 1024 * 1024;
            if (!file.ContentType.StartsWith("image/"))
            {
                _Alert.ShowAlert("الرجاء اختيار ملف صورة فقط!", AlertType.Error);
                return;
            }

            using var ms = new MemoryStream();
            await file.OpenReadStream(maxAllowedSize).CopyToAsync(ms);

            var contentType = file.ContentType;
            editingImageBase64 = $"data:{contentType};base64,{Convert.ToBase64String(ms.ToArray())}";
        }
    }

    /* ===================== تكبير الصورة ===================== */
    private void ShowLargeImage(string base64Url)
    {
        showLargeImage = true;
        largeImageBase64 = base64Url;
    }

    private void CloseLargeImage()
    {
        showLargeImage = false;
        largeImageBase64 = string.Empty;
    }
}
